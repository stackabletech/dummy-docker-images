name: Publish Product Image
description: This action publishes a Docker image
inputs:
  product:
    description: The name of the product to publish
    required: true
runs:
  using: composite
  steps:
    - name: Setup environment variables
      shell: bash
      run: |
        echo "bake-target-tags: "$(< bake-target-tags)
        IMAGE_NAME=$(cat bake-target-tags | cut -d ":" -f 1)
        TAG_NAME=$(cat bake-target-tags | cut -d ":" -f 2)
        echo "image: $IMAGE_NAME"
        echo "tag: $TAG_NAME"

    - name: Push image to repo.stackable.tech and sign via cosign
      shell: bash
      run: |
        # Store the output of `docker image push` into a variable, so we can
        # parse it for the digest
        PUSH_OUTPUT=$(docker image push "$(< bake-target-tags)" 2>&1)
        echo "$PUSH_OUTPUT"
        # Obtain the digest of the pushed image from the output of `docker image
        # push`, because signing by tag is deprecated and will be removed from
        # cosign in the future
        DIGEST=$(echo "$PUSH_OUTPUT" | awk "/: digest: sha256:[a-f0-9]{64} size: [0-9]+$/ { print \$3 }")
        # Refer to image via its digest (docker.stackable.tech/stackable/airflow@sha256:0a1b2c...)
        # This generates a signature and publishes it to the registry, next to the image
        # Uses the keyless signing flow with Github Actions as identity provider
        cosign sign -y "$IMAGE_NAME@$DIGEST"

    - name: Generate SBOM for the image
      shell: bash
      run: |
        syft scan --output cyclonedx-json=sbom.json --select-catalogers "-cargo-auditable-binary-cataloger" --scope all-layers --source-name "${{ matrix.product }}" --source-version "$TAG_NAME" "$IMAGE_NAME@$DIGEST";
        # Determine the PURL for the image
        PURL="pkg:docker/stackable/${{ matrix.product }}@$DIGEST?repository_url=docker.stackable.tech";
        # Get metadata from the image
        IMAGE_METADATA_DESCRIPTION=$(docker inspect --format='{{.Config.Labels.description}}' "$IMAGE_NAME@$DIGEST");
        IMAGE_METADATA_NAME=$(docker inspect --format='{{.Config.Labels.name}}' "$IMAGE_NAME@$DIGEST");
        # Merge the SBOM with the metadata for the image
        jq -s '{"metadata":{"component":{"description":"'"$IMAGE_METADATA_NAME. $IMAGE_METADATA_DESCRIPTION"'","supplier":{"name":"Stackable GmbH","url":["https://stackable.tech/"]},"author":"Stackable GmbH","purl":"'"$PURL"'","publisher":"Stackable GmbH"}}} * .[0]' sbom.json > sbom.merged.json;
        # Attest the SBOM to the image
        cosign attest -y --predicate sbom.merged.json --type cyclonedx "$IMAGE_NAME@$DIGEST"

    - name: Push image to oci.stackable.tech and sign via cosign
      shell: bash
      run: |
        IMAGE_NAME=oci.stackable.tech/sdp/${{ matrix.product }}
        echo "image: $IMAGE_NAME"
        docker tag "$(< bake-target-tags)" "$IMAGE_NAME:$TAG_NAME"
        # Store the output of `docker image push` into a variable, so we can parse it for the digest
        PUSH_OUTPUT=$(docker image push "$IMAGE_NAME:$TAG_NAME" 2>&1)
        echo "$PUSH_OUTPUT"
        # Obtain the digest of the pushed image from the output of `docker image push`, because signing by tag is deprecated and will be removed from cosign in the future
        DIGEST=$(echo "$PUSH_OUTPUT" | awk "/: digest: sha256:[a-f0-9]{64} size: [0-9]+$/ { print \$3 }")
        # Refer to image via its digest (oci.stackable.tech/sdp/airflow@sha256:0a1b2c...)
        # This generates a signature and publishes it to the registry, next to the image
        # Uses the keyless signing flow with Github Actions as identity provider
        cosign sign -y "$IMAGE_NAME@$DIGEST"

    - name: Generate SBOM for the image
      shell: bash
      run: |
        syft scan --output cyclonedx-json=sbom.json --select-catalogers "-cargo-auditable-binary-cataloger" --scope all-layers --source-name "${{ matrix.product }}" --source-version "$TAG_NAME" "$IMAGE_NAME@$DIGEST";
        # Determine the PURL for the image
        PURL="pkg:docker/sdp/${{ matrix.product }}@$DIGEST?repository_url=oci.stackable.tech";
        # Get metadata from the image
        IMAGE_METADATA_DESCRIPTION=$(docker inspect --format='{{.Config.Labels.description}}' "$IMAGE_NAME@$DIGEST");
        IMAGE_METADATA_NAME=$(docker inspect --format='{{.Config.Labels.name}}' "$IMAGE_NAME@$DIGEST");
        # Merge the SBOM with the metadata for the image
        jq -s '{"metadata":{"component":{"description":"'"$IMAGE_METADATA_NAME. $IMAGE_METADATA_DESCRIPTION"'","supplier":{"name":"Stackable GmbH","url":["https://stackable.tech/"]},"author":"Stackable GmbH","purl":"'"$PURL"'","publisher":"Stackable GmbH"}}} * .[0]' sbom.json > sbom.merged.json;
        # Attest the SBOM to the image
        cosign attest -y --predicate sbom.merged.json --type cyclonedx "$IMAGE_NAME@$DIGEST"